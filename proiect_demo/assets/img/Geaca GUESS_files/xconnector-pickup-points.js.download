(function (context) {

    var popup, iframe, iframeUrl, customOrigin, defaultTargetSelector = '.xconn-pickup-form', onCloseHandler, onLoadHandler,
        onResultHandler, defaultTargetSelectorSimpleLimit = 'simple-limit-overlay', originalIframeData, isXconnPickupPopup,
        short_session_key = 'short_session_client_token',
        pickupPointsUrl = "https://pickup-points.xconnector.app", xConnectorUrl = "https://xconnector.app", widgetContext = "cart";

    function isJSONValid(str) {
        if (typeof str !== 'string') {
            return false;
        }
        try {
            var JSONObj = JSON.parse(str);
            if (JSONObj && typeof JSONObj === "object") {
                return true;
            }
            return false;
        } catch (e) {
            return false;
        }
    }

    function handleMessage(event) {
        if (!isJSONValid(event.data)) {
            return false;
        }
        var eventData = JSON.parse(event.data), type = eventData.type, data = eventData.data;
        if (data) {
            originalIframeData = JSON.parse(JSON.stringify(data));
        }
        if (type == 'resize' && data) {
            iframe.style.height = data.height + 'px';
            if (isXconnPickupPopup) {
                checkPopupStyles(data);
            }
        } else if (type === 'close') {
            if (typeof onCloseHandler === 'function') {
                onCloseHandler();
            }
            if (isXconnPickupPopup) {
                removePopup();
            }
        } else if (type === 'result') {
            if (originalIframeData && data[short_session_key]) {
                localStorage.setItem(short_session_key, originalIframeData.short_session_client_token);
            }
            if (typeof onResultHandler === 'function') {
                onResultHandler(data);
            }
        } else if (type === 'sendShowCloseButtons') {
            var origin = (customOrigin || iframeUrl).match(/(\w+\:)\/\/[^/]+/), message = {type: 'showCloseButtons'};
            if (!origin && !origin[0]) return;
            iframe.contentWindow.postMessage(JSON.stringify(message), origin[0]);
        } else if (type === 'checkShortSession') {
            var iframeUrlObject = new URL(originalIframeData.current_url);
            if (localStorage.getItem(short_session_key) && !iframeUrlObject.searchParams.get(short_session_key)) {
                iframeUrlObject.searchParams.set(short_session_key, localStorage.getItem(short_session_key));
                iframe.src = iframeUrlObject.href;
            }
        }
    }

    function onFrameLoaded() {
        var origin = (customOrigin || iframeUrl).match(/(\w+\:)\/\/[^/]+/),
            message = {type: 'hello', host: location.host};
        if (typeof onLoadHandler === 'function') {
            onLoadHandler(iframe, origin[0]);
        }
        if (!origin && !origin[0]) {
            return;
        }
        context.addEventListener('message', handleMessage);
        iframe.contentWindow.postMessage(message, origin[0]);
    }

    function show(url, targetSelector, origin) {
        var target;
        customOrigin = origin;
        if (typeof url !== 'string') {
            throw 'Url must be specified';
        }
        if (iframe && iframe.parentNode) {
            iframe.parentNode.removeChild(iframe);
        }
        iframe = document.createElement('iframe');
        iframeUrl = url;
        targetSelector = targetSelector || defaultTargetSelector;
        target = document.querySelector(targetSelector);
        if (!target) {
            throw 'Error: element ' + targetSelector + ' is not found';
        }
        iframe.addEventListener('load', onFrameLoaded);
        iframe.src = iframeUrl;
        iframe.setAttribute('scrolling', 'no');
        iframe.setAttribute('allow', 'geolocation *');
        iframe.style.display = 'block';
        iframe.style.width = '100%';
        target.appendChild(iframe);
    }

    function showPopup( shop ) {

        if ( typeof shop === 'undefined' || shop == null ) {
            shop = Shopify.shop;
        }

        let url = pickupPointsUrl + "?shop=" + shop + "&token=" + xConnector.token;

        isXconnPickupPopup = true;
        iframe = document.createElement('iframe');
        iframeUrl = url;
        iframe.src = iframeUrl;
        iframe.setAttribute('frameBorder', '0');
        iframe.setAttribute('scrolling', 'no');
        iframe.setAttribute('vspace', '0');
        iframe.setAttribute('hspace', '0');
        iframe.setAttribute('webkitallowfullscreen', '');
        iframe.setAttribute('mozallowfullscreen', '');
        iframe.setAttribute('allowfullscreen', '');
        iframe.setAttribute('id', 'xconn-pickup-simple-limit-iframe');
        iframe.setAttribute('allow', 'geolocation *');
        iframe.style.cssText = 'display: block; width: 100%; height: 100%;';
        document.body.style.overflow = 'hidden';
        iframe.addEventListener('load', onFrameLoaded);
        createPopup();
    }

    function createPopup() {
        var overlay;
        overlay = document.createElement('div');
        overlay.setAttribute('id', defaultTargetSelectorSimpleLimit);
        overlay.style.cssText = 'position: fixed; z-index: 9998; \
                           top: 0; bottom: 0; left: 0; right: 0; \
                           background-color: rgba(0,0,0,0.7); cursor: pointer; \
                           pointer-events: none;';
        popup = document.createElement('div');
        popup.setAttribute('id', 'simple-limit-popup');
        popup.style.cssText = 'position: fixed; z-index: 9999; overflow: auto; \
                           background-color: #ffffff; box-sizing: border-box; \
                           -webkit-overflow-scrolling: touch;';
        popup.appendChild(iframe);
        document.body.appendChild(overlay);
        document.body.appendChild(popup);
        checkPopupStyles();
        overlay.addEventListener('click', function () {
            handleMessage({data: JSON.stringify({type: 'close'})})
        });
    }

    function removePopup() {
        var overlay = document.getElementById(defaultTargetSelectorSimpleLimit),
            popup = document.getElementById('simple-limit-popup');
        document.body.style.overflow = '';
        originalIframeData = null;
        document.body.removeChild(overlay);
        document.body.removeChild(popup);
    }

    function checkPopupStyles(data) {
        var windowHeight = document.documentElement.clientHeight, isMobile = document.body.clientWidth <= 550,
            height = data ? data.height : '300', INDENT = 60, top, bottom, marginTop;
        if (windowHeight <= height + INDENT) {
            top = '30px';
            bottom = '30px';
            height = windowHeight - 60;
            marginTop = 0;
        } else {
            top = '50%';
            bottom = 'auto';
            marginTop = -height / 2 + 'px';
        }
        if (isMobile && popup) {
            popup.style.top = 0;
            popup.style.bottom = 0;
            popup.style.left = 0;
            popup.style.right = 0;
            popup.style.width = '100%';
            popup.style.height = '95vh';
            popup.style.marginTop = 0;
            popup.style.marginLeft = '';
            popup.style.borderRadius = 0;
        } else {
            popup.style.top = top;
            popup.style.bottom = bottom;
            popup.style.left = '10%';
            popup.style.right = '';
            popup.style.width = '80%';
            popup.style.height = height + 'px';
            popup.style.marginTop = marginTop;
            popup.style.borderRadius = '5px';
        }
    }

    function setOnCloseHandler(handler) {
        onCloseHandler = handler;
    }

    function setOnLoadHandler(handler) {
        onLoadHandler = handler;
    }

    function setOnResultHandler(handler) {
        onResultHandler = handler;
    }

    function Form() {
    }

    Form.prototype = {
        show: show,
        onClose: setOnCloseHandler,
        onLoad: setOnLoadHandler,
        onResult: setOnResultHandler,
        showPopup: showPopup,
        xConnectorUrl: xConnectorUrl,
        widgetContext: widgetContext
    };
    context.XCONNECTORPICKUP = context.XCONNECTORPICKUP || {};
    context.XCONNECTORPICKUP.Form = new Form();
    window.onresize = function () {
        if (iframe) {
            var body = document.body, data;
            if (body.clientWidth <= iframe.clientWidth) {
                data = {width: body.clientWidth, height: body.clientHeight}
            } else {
                data = originalIframeData
            }
            handleMessage({data: JSON.stringify({type: 'resize', data: data})})
        }
    };
})(this);


XCONNECTORPICKUP.Form.sendRequest = function ( target, payload )
{
    let xConnectorURL = XCONNECTORPICKUP.Form.xConnectorUrl;

    if ( typeof xConnectorURL === 'undefined' || xConnectorURL == null ) {
        xConnectorURL = "https://xconnector.app";
    }

    let httpRequest = new XMLHttpRequest();
    httpRequest.open('POST', xConnectorURL + "/pickup/" + target + "?token=" + xConnector.token, true );
    httpRequest.setRequestHeader('Content-Type', 'application/json; charset=utf-8' );
    httpRequest.send( JSON.stringify( payload ) );

    httpRequest.onerror = function( ) {
        console.log( this.response.toString() );
        console.log( "Error - Could not send request" );
    };

    httpRequest.onload = function ( ) {
        if ( this.status >= 200 && this.status < 400 ) {
            window.location.href = this.response;
        } else {
            console.log( "Error - Could not send request, status=" + this.status );
        }
    };
}

XCONNECTORPICKUP.Form.createDraftOrder = function ( location )
{
    let getCartRequest = new XMLHttpRequest();
    getCartRequest.location = location;
    getCartRequest.open('GET', '/cart.json', true );

    getCartRequest.onerror = function() {
        console.log( this.response.toString() );
        console.log( "Error - Could not get the cart" );
    };

    getCartRequest.onload = function ( ) {

        if ( this.status >= 200 && this.status < 400 ) {

            let cart = JSON.parse( this.response );

            cart.attributes["locationId"] = getCartRequest.location.id;
            cart.attributes["merchantConnectorId"] = getCartRequest.location.merchantConnectorId;

            cart.attributes["collectPointAddress1"] = getCartRequest.location.address1;
            cart.attributes["collectPointAddress2"] = getCartRequest.location.address2;
            cart.attributes["collectPointName"] = getCartRequest.location.name;
            cart.attributes["collectPointZipCode"] = getCartRequest.location.zipCode;
            cart.attributes["collectPointCity"] = getCartRequest.location.city;
            cart.attributes["collectPointCounty"] = getCartRequest.location.county;
            cart.attributes["collectPointCountyCode"] = getCartRequest.location.countyCode;
            cart.attributes["collectPointCountry"] = getCartRequest.location.country;

            let orderRequest = {
                cart: cart,
                shop: Shopify.shop
            };

            XCONNECTORPICKUP.Form.sendRequest( "create-draft", orderRequest );

        } else {
            console.log( "Error - Could not get the cart, status=" + this.status );
        }
    };

    getCartRequest.send();
}

XCONNECTORPICKUP.Form.updateOrderLocation = function ( location )
{
    let updateOrderLocationRequest = {
        "shop": Shopify.shop,
        "orderId": Shopify.checkout.order_id,
        "location": location
    };

    XCONNECTORPICKUP.Form.sendRequest( "update-order-location", updateOrderLocationRequest );
}

XCONNECTORPICKUP.Form.onResult( function ( location ) {

    let widgetContext = XCONNECTORPICKUP.Form.widgetContext;

    if ( typeof widgetContext === 'undefined' || widgetContext === "cart" ) {
        XCONNECTORPICKUP.Form.createDraftOrder( location );
    } else {
        XCONNECTORPICKUP.Form.updateOrderLocation( location );
    }
} );